#version 450

layout (binding = 0) buffer SolidsIn {
    int s[ ];
};

layout (binding = 1) buffer UIn {
    float u_in[ ];
};

layout (binding = 2) buffer VIn {
    float v_in[ ];
};

layout (binding = 3) buffer UOut {
    float u_out[ ];
};

layout (binding = 4) buffer VOut {
    float v_out[ ];
};

layout (push_constant) uniform SplashPushConstants
{
    uint sim_width;
    uint sim_height;
    uint s_active;
    float radius;
    vec4 pos;
    vec4 dir;
} splash;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#define S_COORD(i,j) (i) + (j) * splash.sim_width
#define U_COORD(i,j) (i) + (j) * (splash.sim_width + 1)
#define V_COORD(i,j) (i) + (j) * splash.sim_width

void main(){

    uint gIDx = gl_GlobalInvocationID.x;
    uint gIDy = gl_GlobalInvocationID.y;

    vec2 d = vec2(float(gIDx),float(gIDy)) - splash.pos.xy * vec2(float(splash.sim_width), float(splash.sim_height));

    if(gIDx < splash.sim_width + 1 && gIDy < splash.sim_height){
        uint x_l = max(0, gIDx - 1);
        uint x_r = min(gIDx, splash.sim_width - 1);
        int fluid = s[S_COORD(x_l,gIDy)] * s[S_COORD(x_r,gIDy)];
        vec2 d_u = d + vec2(0.0, 0.5);
        float strength = exp(-dot(d_u,d_u) / splash.radius) * float(splash.s_active) * float(fluid);
        u_out[U_COORD(gIDx,gIDy)] = u_in[U_COORD(gIDx,gIDy)] + strength * splash.dir.x;
    }

    if(gIDx < splash.sim_width && gIDy < splash.sim_height + 1){
        uint y_t = max(0, gIDy - 1);
        uint y_b = min(gIDy, splash.sim_height - 1);
        int fluid = s[S_COORD(gIDx,y_t)] * s[S_COORD(gIDx,y_b)];
        vec2 d_v = d + vec2(0.5, 0.0);
        float strength = exp(-dot(d_v,d_v) / splash.radius) * float(splash.s_active) * float(fluid);
        v_out[V_COORD(gIDx,gIDy)] = v_in[V_COORD(gIDx,gIDy)] + strength * splash.dir.y;
    }
}