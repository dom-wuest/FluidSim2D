#version 450

layout (binding = 0) buffer SolidsIn {
    int s[ ];
};

layout (binding = 1) buffer PressureIn {
    float pressure[ ];
};

layout (binding = 2) buffer UIn {
    float u_in[ ];
};

layout (binding = 3) buffer VIn {
    float v_in[ ];
};

layout (binding = 4) buffer UOut {
    float u_out[ ];
};

layout (binding = 5) buffer VOut {
    float v_out[ ];
};

layout (push_constant) uniform PushConstants
{
    uint width;
    uint height;
    uint sim_width;
    uint sim_height;
    float deltaTime;
} p;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#define S_COORD(i,j) (i) + (j) * p.sim_width
#define U_COORD(i,j) (i) + (j) * (p.sim_width + 1)
#define V_COORD(i,j) (i) + (j) * p.sim_width

#define APPLY_PRESSURE

void main(){

#ifdef APPLY_PRESSURE
    uint gIDx;
    uint gIDy;

    // u component
    gIDx = gl_GlobalInvocationID.x + 1;
    gIDy = gl_GlobalInvocationID.y;

    if(gIDx < p.sim_width && gIDy < p.sim_height){
        int s_l = s[S_COORD(gIDx - 1, gIDy)];
        int s_r = s[S_COORD(gIDx, gIDy)];
        int s_u = s_l * s_r;
        float p_l = pressure[S_COORD(gIDx - 1, gIDy)];
        float p_r = pressure[S_COORD(gIDx, gIDy)];
        float u_old = u_in[U_COORD(gIDx, gIDy)];
        float u_new = u_old - (p_r - p_l) * float(s_u);
        u_out[U_COORD(gIDx, gIDy)] = u_new;
    }
    
    // v component
    gIDx = gl_GlobalInvocationID.x;
    gIDy = gl_GlobalInvocationID.y + 1;

    if(gIDx < p.sim_width && gIDy < p.sim_height){
        int s_t = s[S_COORD(gIDx, gIDy - 1)];
        int s_b = s[S_COORD(gIDx, gIDy)];
        int s_v = s_t * s_b;
        float p_t = pressure[S_COORD(gIDx, gIDy - 1)];
        float p_b = pressure[S_COORD(gIDx, gIDy)];
        float v_old = v_in[V_COORD(gIDx, gIDy)];
        float v_new = v_old - (p_b - p_t) * float(s_v);
        v_out[V_COORD(gIDx, gIDy)] = v_new;
    }
#else
    uint gIDx = gl_GlobalInvocationID.x;
    uint gIDy = gl_GlobalInvocationID.y;

    if(gIDx < p.width + 1 && gIDy < p.height){
        u_out[U_COORD(gIDx,gIDy)] = u_in[U_COORD(gIDx,gIDy)];
    }

    if(gIDx < p.width && gIDy < p.height + 1){
        v_out[V_COORD(gIDx,gIDy)] = v_in[V_COORD(gIDx,gIDy)];
    }
#endif
}