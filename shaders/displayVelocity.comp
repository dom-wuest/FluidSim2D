#version 450

layout (binding = 0, rgba8 ) uniform writeonly image2D resultImage;

layout (binding = 1) readonly buffer SolidsIn {
    int solids[ ];
};

layout (binding = 2) readonly buffer UIn {
    float u[ ];
};

layout (binding = 3) readonly buffer VIn {
    float v[ ];
};

layout (push_constant) uniform PushConstants
{
    uint width;
    uint height;
    uint sim_width;
    uint sim_height;
    float deltaTime;
} p;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

float nearest_solids(float x, float y){
    // x,y in [0.0,1.0)
    float x_l = floor(x * float(p.sim_width));
    float y_l = floor(y * float(p.sim_height));
    return float(solids[int(x_l) + p.sim_width * int(y_l)]);
}

float bilerp_solids(float x, float y){
    // x,y in [0.0,1.0)
    float s = floor(x * float(p.sim_width) - 0.5);
    float t = floor(y * float(p.sim_height) - 0.5);
    float dx = x * float(p.sim_width) - s - 0.5;
    float dy = y * float(p.sim_height) - t - 0.5;

    int s0 = max(int(s), 0);
    int s1 = min(int(s) + 1, int(p.sim_width) - 1);
    int t0 = max(int(t), 0);
    int t1 = min(int(t) + 1, int(p.sim_height) - 1);

    float A = float(solids[s0 + p.sim_width * t0]);
    float B = float(solids[s1 + p.sim_width * t0]);
    float C = float(solids[s0 + p.sim_width * t1]);
    float D = float(solids[s1 + p.sim_width * t1]);
    return (A * (1.0-dx) + B * dx) * (1.0-dy) + (C * (1.0-dx) + D * dx) * dy;
}

void main(){

    uint gIDx = gl_GlobalInvocationID.x;
    uint gIDy = gl_GlobalInvocationID.y;

    if(gIDx >= p.width || gIDy >= p.height){
        return;
    }
    //int solid = solids[(1 + gIDx + ((gIDy + 1) * p.sim_width))];
    //float u_vel = u[(1 + gIDx + ((gIDy + 1) * p.sim_width))];
    //float v_vel = v[(1 + gIDx + ((gIDy + 1) * p.sim_width))];
    //vec4 color = vec4(0.0,0.0,0.0,1.0);
    //if(solid == 1){
    //    color = vec4(u_vel,v_vel,0.0,1.0);
    //} else {
    //    color = vec4(0.0,0.0,1.0,1.0);
    //}

    float x = float(gIDx) / float(p.width);
    float y = float(gIDy) / float(p.height);
    float solid = bilerp_solids(x,y);
    vec4 color = vec4(0.0,0.0,solid,1.0);
    imageStore( resultImage, ivec2(gl_GlobalInvocationID.xy), color);
}