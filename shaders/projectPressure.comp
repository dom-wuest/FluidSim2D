#version 450

layout (binding = 0) buffer SolidsIn {
    int s[ ];
};

layout (binding = 1) buffer DivIn {
    float div[ ];
};

layout (binding = 2) buffer PIn {
    float p_in[ ];
};

layout (binding = 3) buffer POut {
    float p_out[ ];
};

layout (push_constant) uniform PushConstants
{
    uint width;
    uint height;
    uint sim_width;
    uint sim_height;
    float deltaTime;
} p;

layout( local_size_x_id = 0) in;
layout( local_size_y_id = 1) in;

#define S_COORD(i,j) (i) + (j) * p.sim_width
#define NUM_ITER 5

#define LOCAL_COORD(i,j) (i) + (j) * (gl_WorkGroupSize.x)
#define LOCAL_OFFSET(buffID) (buffID) * gl_WorkGroupSize.x * gl_WorkGroupSize.y
// one element per thread
shared float[(gl_WorkGroupSize.x) * (gl_WorkGroupSize.y) * 2] p_local;
shared int[(gl_WorkGroupSize.x) * (gl_WorkGroupSize.y)] s_local;

void main(){

    int gIDx = int(gl_GlobalInvocationID.x) - NUM_ITER * (1 + 2 * int(gl_WorkGroupID.x));
    int gIDy = int(gl_GlobalInvocationID.y) - NUM_ITER * (1 + 2 * int(gl_WorkGroupID.y));

    int lIDx = int(gl_LocalInvocationID.x);
    int lIDy = int(gl_LocalInvocationID.y);

    
    if(gIDx < 0 || gIDx >= int(p.sim_width) || gIDy < 0 || gIDy >= int(p.sim_height)){
        s_local[LOCAL_COORD(lIDx,lIDy)] = 0;
        p_local[LOCAL_COORD(lIDx,lIDy) + LOCAL_OFFSET(0)] = 0.0;
        p_local[LOCAL_COORD(lIDx,lIDy) + LOCAL_OFFSET(1)] = 0.0;
        return;
    }

    s_local[LOCAL_COORD(lIDx,lIDy)] = s[S_COORD(gIDx, gIDy)];
    float press_old = p_in[S_COORD(gIDx, gIDy)];
    p_local[LOCAL_COORD(lIDx,lIDy) + LOCAL_OFFSET(0)] = press_old;
    p_local[LOCAL_COORD(lIDx,lIDy) + LOCAL_OFFSET(1)] = press_old;
    barrier();

    if(lIDx == 0 || lIDx == gl_WorkGroupSize.x-1 || lIDy == 0 || lIDy == gl_WorkGroupSize.y-1 || s_local[LOCAL_COORD(lIDx,lIDy)] == 0){
        return;
    }

    float divergence = div[S_COORD(gIDx, gIDy)];

    int s_l = s_local[LOCAL_COORD(lIDx-1, lIDy)];
    int s_r = s_local[LOCAL_COORD(lIDx+1, lIDy)];
    int s_t = s_local[LOCAL_COORD(lIDx, lIDy-1)];
    int s_b = s_local[LOCAL_COORD(lIDx, lIDy+1)];

    int has_l = min(gIDx, 1);
    int has_r = int(p.sim_width) - 1 - max(gIDx, int(p.sim_width)-2);
    int has_t = min(gIDy, 1);
    int has_b = int(p.sim_height) - 1 - max(gIDy, int(p.sim_height)-2);

    int s_sum = s_l * has_l + s_r * has_r + s_t * has_t + s_b * has_b;
    if (s_sum == 0){
        return;
    }
    
    int memoryIdx = 0;
    float p_l;
    float p_r;
    float p_t;
    float p_b;

    for(int i = 1; i <= NUM_ITER; i++){

        if(lIDx < i || lIDx >= int(gl_WorkGroupSize.x)-i || lIDy < i || lIDy >= int(gl_WorkGroupSize.y)-i){
            return;
        }

        p_l = p_local[LOCAL_COORD(lIDx-1, lIDy) + LOCAL_OFFSET(memoryIdx)];
        p_r = p_local[LOCAL_COORD(lIDx+1, lIDy) + LOCAL_OFFSET(memoryIdx)];
        p_t = p_local[LOCAL_COORD(lIDx, lIDy-1) + LOCAL_OFFSET(memoryIdx)];
        p_b = p_local[LOCAL_COORD(lIDx, lIDy+1) + LOCAL_OFFSET(memoryIdx)];

        memoryIdx = memoryIdx == 1 ? 0 : 1;

        p_local[LOCAL_COORD(lIDx, lIDy) + LOCAL_OFFSET(memoryIdx)] = (p_l * float(has_l) + p_r * float(has_r) + p_t * float(has_t) + p_b * float(has_b) - divergence) / float(s_sum);

        barrier();
    }
    
    p_out[S_COORD(gIDx, gIDy)] = p_local[LOCAL_COORD(lIDx, lIDy) + LOCAL_OFFSET(memoryIdx)];
}